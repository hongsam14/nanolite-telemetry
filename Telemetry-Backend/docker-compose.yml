version: "3.7"

services:
  opensearch-node1:
    # This is also the hostname of the container within the Docker network (i.e. https://opensearch-node1/)
    image: opensearchproject/opensearch:latest
    container_name: opensearch-node1
    environment:
      - cluster.name=opensearch-cluster # Name the cluster
      - node.name=opensearch-node1 # Name the node that will run in this container
      - discovery.seed_hosts=opensearch-node1,opensearch-node2 # Nodes to look for when discovering the cluster
      - cluster.initial_cluster_manager_nodes=opensearch-node1,opensearch-node2 # Nodes eligibile to serve as cluster manager
      - bootstrap.memory_lock=true # Disable JVM heap memory swapping
      - "OPENSEARCH_JAVA_OPTS=-Xms16g -Xmx16g" # Set min and max JVM heap sizes to at least 50% of system RAM
      - OPENSEARCH_INITIAL_ADMIN_PASSWORD=${DATABASE_PW} # Sets the demo admin user password when using demo configuration (for OpenSearch 2.12 and later)
    ulimits:
      memlock:
        soft: -1 # Set memlock to unlimited (no soft or hard limit)
        hard: -1
      nofile:
        soft: 65536 # Maximum number of open files for the opensearch user - set to at least 65536
        hard: 65536
    volumes:
      - opensearch-data1:/usr/share/opensearch/data # Creates volume called opensearch-data1 and mounts it to the container
    ports:
      - 9200:9200 # REST API
      - 9600:9600 # Performance Analyzer
    command: >
      bash -c "grep -qxF 'indices.query.bool.max_clause_count: 2048' /usr/share/opensearch/config/opensearch.yml || echo 'indices.query.bool.max_clause_count: 2048' >> /usr/share/opensearch/config/opensearch.yml; exec /usr/share/opensearch/opensearch-docker-entrypoint.sh"
    networks:
      - otel-net # All of the containers will join the same Docker bridge network


  opensearch-node2:
    image: opensearchproject/opensearch:latest # This should be the same image used for opensearch-node1 to avoid issues
    container_name: opensearch-node2
    environment:
      - cluster.name=opensearch-cluster
      - node.name=opensearch-node2
      - discovery.seed_hosts=opensearch-node1,opensearch-node2
      - cluster.initial_cluster_manager_nodes=opensearch-node1,opensearch-node2
      - bootstrap.memory_lock=true
      - "OPENSEARCH_JAVA_OPTS=-Xms16g -Xmx16g"
      - OPENSEARCH_INITIAL_ADMIN_PASSWORD=${DATABASE_PW}
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - opensearch-data2:/usr/share/opensearch/data
    command: >
      bash -c "grep -qxF 'indices.query.bool.max_clause_count: 2048' /usr/share/opensearch/config/opensearch.yml || echo 'indices.query.bool.max_clause_count: 2048' >> /usr/share/opensearch/config/opensearch.yml; exec /usr/share/opensearch/opensearch-docker-entrypoint.sh"
    networks:
      - otel-net
  
  opensearch-dashboards:
    image: opensearchproject/opensearch-dashboards:latest # Make sure the version of opensearch-dashboards matches the version of opensearch installed on other nodes
    container_name: opensearch-dashboards
    ports:
      - 5601:5601 # Map host port 5601 to container port 5601
    expose:
      - "5601" # Expose port 5601 for web access to OpenSearch Dashboards
    environment:
      OPENSEARCH_HOSTS: '["https://opensearch-node1:9200","https://opensearch-node2:9200"]' # Define the OpenSearch nodes that OpenSearch Dashboards will query
    networks:
      - otel-net
  
  # jaeger-collector:
  #   image: jaegertracing/jaeger-collector:latest
  #   ports:
  #     - "14250"
  #     - "4318"
  #     - "4317"
  #   networks:
  #     - otel-net
  #   restart: on-failure
  #   environment:
  #     - SPAN_STORAGE_TYPE=opensearch
  #     - ES_TAGS_AS_FIELDS_ALL=true
  #     - ES_USERNAME=admin
  #     - ES_PASSWORD=ShowMe12#$
  #     - ES_TLS_SKIP_HOST_VERIFY=true
  #   command: [
  #     "--es.server-urls=https://opensearch-node1:9200",
  #     "--es.tls.enabled=true",
  #   ]
  #   depends_on:
  #     - opensearch-node1

  jaeger-query:
    image: jaegertracing/jaeger-query:latest
    container_name: jaeger-query
    networks:
      - otel-net
    restart: on-failure
    environment:
      - SPAN_STORAGE_TYPE=opensearch
      - ES_SERVER_URLS=http://opensearch:9200
      - ES_TAGS_AS_FIELDS_ALL=true
      - ES_USERNAME=${DATABASE_ID}
      - ES_PASSWORD=${DATABASE_PW}
      - ES_TLS_SKIP_HOST_VERIFY=true
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "16686:16686"  # UI 포트
    expose:
      - "16686"
    depends_on:
      - opensearch-node1
      - jaeger-ingester
    command: [
      "--es.server-urls=https://opensearch-node1:9200",
      "--es.tls.enabled=true",
    ]

  jaeger-ingester:
    image: jaegertracing/jaeger-ingester:latest
    container_name: jaeger-ingester
    ports:
      - "14250"
      - "4318"
      - "4317"
    networks:
      - otel-net
    restart: on-failure
    environment:
      - SPAN_STORAGE_TYPE=opensearch
      - ES_TAGS_AS_FIELDS_ALL=true
      - ES_USERNAME=${DATABASE_ID}
      - ES_PASSWORD=${DATABASE_PW}
      - ES_TLS_SKIP_HOST_VERIFY=true
      - KAFKA_CONSUMER_BROKERS=${KAFKA_URL}
      - KAFKA_CONSUMER_TOPIC=otel-traces
    command: [
      "--es.server-urls=https://opensearch-node1:9200",
      "--es.tls.enabled=true",
    ]
    depends_on:
      - opensearch-node1
  
  # opentelemetry-collector:
  #   image: otel/opentelemetry-collector-contrib:0.120.0
  #   # image: otel/opentelemetry-collector-contrib:0.43.0
  #   container_name: otel-collector
  #   restart: always
  #   volumes:
  #     - ./config/collector/config.yml/:/etc/opentelemetry-collector.yml
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   command:
  #     - "--config=/etc/opentelemetry-collector.yml"
  #   depends_on:
  #     # - kafka
  #     - jaeger
  #     - jaeger-query
  #     - opensearch-node1
  #     - opensearch-node2
  #   ports:
  #     - 1888:1888   # pprof extension
  #     - 4317:4317   # otlp grpc receiver
  #     - 4318:4318   # otlp http receiver
  #     - 13133:13133 # health check extension
  #   expose:
  #     - "4317"
  #   networks:
  #     - otel-net

volumes:
  opensearch-data1:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ./opensearch-data1
  opensearch-data2:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ./opensearch-data2
  kafka-data:
    driver: local
    driver_opts:
      o: bind
      type: none
      device: ./kafka-data
  
  
  
networks:
  otel-net:
    driver: bridge